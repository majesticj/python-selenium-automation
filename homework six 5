#product_search.feature
#header.py
#search_results_page.py
#application.py
#main.page.py
#sample_script.py
#base_page.py
#enviroment.py

Feature: Test Scenarios for Search functionality

kk Scenario: User can search for a tes on target
    Given Open target main page
    When search for tea
    And Click on search icon
    Then Product results for tea

from pages base_page import Page

class MainPage(page):

    def open_main_page (self):
        self.open.url('https://www.target.com/')


from selenium.import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.support.wait import WebDriverWait
from webdriver_manager.chrome import ChromeDriverManager

from app application import Application

def browser_init(context):
    """
    :param context: Behave context
    """
    driver_path = ChromeDriverManager().install()
    service = Service(driver_path)
    context.driver = webdriver.Chrome(service=service)

    context.driver.maximize_window()

    context.driver.maximize_window()
    context.driver.implicitly_wait(4)
    context.wait = WebDriverWait(context.driver, 10)
    context app = Application(context.driver)


def before_scenario(context, scenario):
    print('\nStarted scenario: ', scenario.name)
    browser_init(context)


def before_step(context, step):
    print('\nStarted step: ', step)


def after_step(context, step):
    if step.status == 'failed':
        print('\nStep failed: ', step)


def after_scenario(context, feature):
    context.driver.delete_all_cookies()
    context.driver.quit()
from pages base_page Import Page
from pages.header import Header
from pages.main.page import MainPage
from pages.search_results_page import SearchResutsPage


class Application:

    def __init__(self, driver):
        self.driver = driver
        self.main_page = MainPage(driver)
        self.header =Header(driver)
        self.search_results_page = SearchResutsPage(driver)


from selenium.webdriver.common.by import By

from pages.base_page import Page


class SearchResultsPage(Page):
    Search_Results_TEXT = By.XPATH, "//div(@data-test=\p=resultsCount"}")

    def verify_search_results(self):
        actual_text = self.find_element(self.Search_Results_TEXT).text
        assert "tea" in actual_text. f Error. Text tea not in (actual_text)


from slenium.webdriver.common.by import By

from pages.base.page import Page


class.Header(page):

SEARCH_FIELD = (By, ID 'search')
SEARCH_BTN = (By.XPATH, "//button[@data-test= @web/search/button")

    def search(self):
        self.input.text(text 'tea, self.SEARCH_FIELD)
        self.click(*self.SEARCH_BTN)

from sample_script import driver


class Page:

    def__init (self.driver):
    self.driver = driver

    def open.url(self,url)
    self.driver.get(url)

    def find_element(selfself. locater):
    self.driver.find_element(*locater)

    def click(selfslef, *locator):
        self.driver.find_element(*locator) click()

        def input_text(self.text, *locator):
        self.driver.find_element(*locator) send_keys(text

# get the path to the ChromeDriver executable
driver_path = ChromeDriverManager().install()



# create a new Chrome browser instance
service = Service(driver_path)
driver = webdriver.Chrome(service=service)
driver.maximize_window()

# open the url
driver.get('https://www.google.com/')

# populate search field
search = driver.find_element(By.NAME, 'q')
search.clear()
search.send_keys('Car')

# wait for 4 sec
sleep(4)

# click search button
driver.find_element(By.NAME, 'btnK').click()

# verify search results
assert 'car' in driver.current_url.lower(), f"Expected query not in {driver.current_url.lower()}"
print('Test Passed')

driver.quit()

